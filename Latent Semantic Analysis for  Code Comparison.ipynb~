{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Latent Semantic Analysis for Code Comparison : Solutions to the Check for Palindromes Challenge\n",
    "\n",
    "In this project I applied Latent Semantic Analysis to evaluate how close the solutions given by FCC students was. The compared solutions were for the \"Check for Palindromes\" problem and all were found in the FreeCodeCamp Torrent Dataset.\n",
    "\n",
    "The code is a quick-and-dirty implementation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: pylab import has clobbered these variables: ['char', 'dist', 'record', 'rec', 'random']\n",
      "`%matplotlib` prevents importing * from pylab and numpy\n"
     ]
    }
   ],
   "source": [
    "%pylab inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data preparation consisted in a overall parsing of the codes some we could find the basics. In this project the parsing was a hard-coded implementation. Some other libraries and basic global variables were here also defined."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "## TEST!!!\n",
    "import os, sys\n",
    "import json\n",
    "import re\n",
    "import random\n",
    "import queue\n",
    "from collections import defaultdict, deque\n",
    "import numpy\n",
    "import pandas\n",
    "import nltk\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following section is about:\n",
    "* obtaining the Torrent Dataset (in a local directory)\n",
    "* selecting the code to be analysed\n",
    "* parsing the code, including the elimination of undesirable lines (eg. comments, console.logs) and the renaming of some code elements (eg. variable names) into a single form that becomes comparable\n",
    "* updating a dictionary with relevant information about the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\n",
    "# global functionalities and variables\n",
    "directory = \"/add/your/path/here\"\n",
    "\n",
    "count = -1\n",
    "data = []\n",
    "data2 = defaultdict(int)\n",
    "comp1 = re.compile(r\"//(.*)\\n\") #delete comments\n",
    "comp2 = re.compile(r\"console\\.log\\([^\\)]+\\)\") #delete console.logs\n",
    "comp3 = re.compile(r\"(\\w+)\")\n",
    "comp4 = re.compile(r\"function palindrome  \\(  [^\\)]+  \\)\")\n",
    "\n",
    "indexid = -1\n",
    "finaldata = defaultdict(dict)\n",
    "usedcharacters = set()\n",
    "with open(directory+\"/output.json\", \"r\") as f_in:\n",
    "    while 1:\n",
    "        record = f_in.readline()\n",
    "        indexid += 1\n",
    "        if not record:\n",
    "            break\n",
    "        if len(record) > 3:\n",
    "            try:\n",
    "                recordjson = json.loads(record[:-2])\n",
    "            except ValueError:\n",
    "                if record == '': continue\n",
    "            for subrecord in recordjson:\n",
    "                try:\n",
    "                    #Check for Palindromes, Roman Numeral Converter\n",
    "                    if \"name\" in list(subrecord.keys()):\n",
    "                        data2[subrecord[\"name\"]] = data2[subrecord[\"name\"]] + 1\n",
    "                        if subrecord[\"name\"] == \"Check for Palindromes\":\n",
    "                            #DATA CLEANING!!!\n",
    "                            #data.append(subrecord[\"solution\"])\n",
    "                            #find regex?\n",
    "                            modrec = \" \".join([ x for x in re.sub(comp1,\" \", subrecord[\"solution\"], re.M|re.I).replace(\"\\n\", \" \").replace(\"\\t\", \" \").split(\" \") if x != \"\" ]).replace(\";\",\" \")\n",
    "                            modrec = re.sub(comp2, \" \", modrec, re.M|re.I)\n",
    "\n",
    "                            \n",
    "                            solworegexq = deque(modrec.replace(\"\\n\", \" \").replace(\"\\t\", \" \").split(\"(\")[::-1])\n",
    "                            solworegex = []\n",
    "                            regexlist = []\n",
    "                            #print(solworegexq)\n",
    "                            while len(solworegexq) > 0:\n",
    "                                lookingforreplace = solworegexq.pop()\n",
    "                                #print(lookingforreplace)\n",
    "                                solworegex.append(lookingforreplace)\n",
    "                                if \"replace\" in lookingforreplace.split(\".\") or \"split\" in lookingforreplace.split(\".\") or \"match\" in lookingforreplace.split(\".\") or \"=\" in lookingforreplace.split(\".\"):\n",
    "                                    count = 1\n",
    "                                    regexsection = ''\n",
    "                                    while count == 1:\n",
    "                                        regexsection = solworegexq.pop()\n",
    "                                        regexsectionsearch = re.search(r\"/.+/[a-z]*\", regexsection.replace('\"', \"'\"))\n",
    "                                        if regexsectionsearch.group(0):\n",
    "                                            regexsec = regexsectionsearch.group(0)\n",
    "                                            regexlist.append(regexsec)\n",
    "                                            solworegex.append(regexsection.replace(regexsec, \"REGEX\"))\n",
    "                                            \n",
    "                                            count = 0\n",
    "                                        else:\n",
    "                                            solworegex.append(regexsection)\n",
    "                            modrec = \"(\".join(solworegex)\n",
    "                            modrec = \" \".join([x for x in re.sub(comp3, r\" \\1 \", modrec, re.M|re.I).split(\" \") if x != \"\"])                            \n",
    "                            for r in [\"(\",\")\",\".\",\",\",\":\",\"=\",\"{\",\"}\",\"==\", \"===\",\"[\",\"]\",\"+\",\"++\",\"-\",\"--\",\"<\",\">\",\"'\",'\"',\"!\",\"!=\",\"?\"]:\n",
    "                                modrec = modrec.replace(r, \" \"+r+\" \")\n",
    "                            #finding variable lists\n",
    "                            varlist = []\n",
    "                            #first variables: arguments\n",
    "                            #print(re.findall(comp4, modrec).replace(\" \",\"\").split(\"(\")[1].split(\")\")[0])\n",
    "                            varargs = re.search(comp4, modrec).group(0).replace(\" \",\"\").split(\"(\")[1].split(\")\")[0]\n",
    "                            for varname in varargs.split(\",\"):\n",
    "                                varlist.append(varname)\n",
    "                            #function variables\n",
    "                            modrecq = deque(modrec.split(\" \")[::-1])\n",
    "                            while len(modrecq) > 0:\n",
    "                                lookingforvar = modrecq.pop()\n",
    "                                if lookingforvar == \"var\":\n",
    "                                    count = 1\n",
    "                                    while count and len(modrecq) > 0:\n",
    "                                        varname = modrecq.pop()\n",
    "                                        if len(varname) > 0:\n",
    "                                            varlist.append(varname)\n",
    "                                            count = 0\n",
    "                            ###print(varlist)\n",
    "                            for ii, nname in enumerate(varlist):\n",
    "                                modrec = modrec.replace(\" \"+nname+\" \", \" VAR_\"+str(ii)+\" \")\n",
    "                            \n",
    "                            #finally, remove last palindrome call\n",
    "                            modrec = \" \".join(modrec.split(\" \")[:modrec.split(\" \")[2:].index(\"palindrome\") + 2])\n",
    "                            ###print(modrec)\n",
    "                            \n",
    "                            data.append(modrec)\n",
    "                            codewordcount = defaultdict(int)\n",
    "                            for w in modrec.split(\" \"):\n",
    "                                if w == \"''\": continue\n",
    "                                codewordcount[w] = codewordcount[w] + 1\n",
    "                            finaldata[indexid] = [modrec, codewordcount, subrecord[\"solution\"], subrecord[\"completedDate\"], regexlist, varlist]\n",
    "                            usedcharacters = usedcharacters | set(codewordcount.keys())\n",
    "                            \n",
    "                except:\n",
    "                    pass\n",
    "                    #print(\"error in name\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(OBS: possible errors where silently ignored in this presentation, see except except above)\n",
    "\n",
    "The target file was `finaldata`. That contains:\n",
    "* *solution index*: according to the position index at which the solution was found in the Torrent Dataset\n",
    "* *parsed solution*\n",
    "* dict with the *characters count in the **parsed** solution* but the empty character - be aware that for a later work, the counts per solution were *standardised*\n",
    "* *actual solution*\n",
    "* *list of regex* that my parsing method managed to extract\n",
    "* *list of variable names* that my parsing method managed to extract\n",
    "\n",
    "After getting all the data in a more useful format I converted that file into pandas.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#build the matrix of list of lists (=records)\n",
    "usedcharacters = sorted(usedcharacters)[1:] #eliminate the non-character character\n",
    "datatopandas = []\n",
    "s_solindex = sorted(finaldata)\n",
    "for rec in s_solindex:                          #iterate through RECORDS (solutions given by campers for the palindrome problem)\n",
    "    numcol = len(usedcharacters)\n",
    "    rectopandas = [0]*numcol\n",
    "    #rectopandas[0] = rec\n",
    "    for char in list(finaldata[rec][1].keys()): #iterate through keys of characters counts per RECORD (= solution given by camper)\n",
    "        if char == '' or char not in usedcharacters:                          #donot include the non-character character\n",
    "            continue\n",
    "        ichar = usedcharacters.index(char)\n",
    "        rectopandas[ichar] = finaldata[rec][1][char]\n",
    "    rowsum = sum(rectopandas)                    #prepare row in normalised form\n",
    "    rectopandas = map(lambda x: x/rowsum, rectopandas)\n",
    "    datatopandas.append(rectopandas)\n",
    "        \n",
    "char_df = pandas.DataFrame(datatopandas, columns = usedcharacters)\n",
    "char_df_trans = char_df.transpose()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The pandas format consists in rows of parsed solutions against columns of the symbols and naming found in that solution.\n",
    "\n",
    "In our target dataset we found 139 key symbols and names (rows) vs 153 solutions (columns):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(139, 153)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "char_df_trans.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##LSA\n",
    "\n",
    "In this part of the project I was using http://www.frankcleary.com/svd/ as main reference for the code.\n",
    "\n",
    "In my case I had to made a transpose of the char_df pandas DataFrame just because the way it was constructed, but the rest resembles the aforementioned code:\n",
    "* using numpy linalg.svd for singular value decomposition of the now char_df_trans matrix.\n",
    "* identification and additional formatting of the right-singular unitary matrix representing the parsed solutions\n",
    "* analysis of the distances between parsed solutions by comparing column to column of the right-singular values (see `dist` function)\n",
    "\n",
    "In the case below, I left the indexing of the solution to be its position in the DataFrame and **not in the Torrent Dataset** as previously defined."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "U, sigma, V = numpy.linalg.svd(char_df_trans)\n",
    "v_df = pandas.DataFrame(V)\n",
    "v_df.apply(lambda x: numpy.round(x, decimals=2))\n",
    "\n",
    "\n",
    "def dist(col1, col2, sigma=sigma):\n",
    "    \"\"\"Return the norm of (col1 - col2), where the differences in \n",
    "    each dimension are wighted by the values in sigma.\"\"\"\n",
    "    return numpy.linalg.norm(numpy.array(col1 - col2) * numpy.append(sigma,[0]*(len(dist_df)-len(sigma))))\n",
    "    \n",
    "dist_df = pandas.DataFrame(index=v_df.columns, columns=v_df.columns)\n",
    "for sol in v_df.columns:\n",
    "    dist_df[sol] = v_df.apply(lambda x: dist(v_df[sol].values, x.values))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The shape of the dist_df matrix (dataframe) gives us the number of solutions to be evaluated:  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(153, 153)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, following the method suggested by Frank (above) I made a heatmap of the distances between solutions, in between three-ranking colouring."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": [
       "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\n",
       "YII=\n"
      ],
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f3411d885c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#levels = [0.06, 0.075]\n",
    "levels = [.24, 0.48]\n",
    "binned_df = dist_df.copy()\n",
    "binned_df[(dist_df <= levels[0]) & (dist_df > 0)] = 1\n",
    "binned_df[(dist_df <= levels[1]) & (dist_df > levels[0])] = 2\n",
    "binned_df[(dist_df < 1) & (dist_df > levels[1])] = 3\n",
    "plt.imshow(binned_df.values, interpolation='none')\n",
    "ax = plt.gca()\n",
    "plt.xticks(range(0, len(binned_df.columns.values), 30))\n",
    "plt.yticks(range(0, len(binned_df.index.values), 30))\n",
    "labels = [x for x in range(0, len(binned_df.columns.values), 30) if x%30 == 0]\n",
    "ax.set_xticklabels(labels, rotation=90)\n",
    "ax.set_yticklabels(labels)\n",
    "plt.title(\"Similarity between solutions\\nLower value = more similar\")\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that the numeration do NOT correspond to the name given to the solution but to the order that they took in the matrix.\n",
    "\n",
    "\n",
    "Finally, we make a comparison, based on the actual indexing of the solution as in the Torrent Dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 first solutions most similar to 22:\n",
      "[4070, 3440, 3415, 1783, 2417, 3474, 204, 2810, 5674, 1112]\n",
      "\n",
      "\n",
      "10 first solutions most similar to 60:\n",
      "[2427, 3368, 2465, 3687, 429, 337, 3420, 5270, 294, 1411]\n",
      "\n",
      "\n",
      "10 first solutions most similar to 87:\n",
      "[727, 3640, 1315, 5018, 347, 1209, 2576, 4976, 337, 2310]\n",
      "\n",
      "\n",
      "10 first solutions most similar to 118:\n",
      "[2576, 1209, 1612, 4561, 3295, 3543, 1851, 4433, 1315, 2479]\n",
      "\n",
      "\n",
      "10 first solutions most similar to 204:\n",
      "[2810, 1873, 1112, 4691, 1783, 22, 3141, 1845, 4433, 2417]\n",
      "\n",
      "\n",
      "10 first solutions most similar to 209:\n",
      "[2254, 1290, 2647, 2944, 2663, 1414, 651, 5558, 2334, 3389]\n",
      "\n",
      "\n",
      "10 first solutions most similar to 294:\n",
      "[3171, 3443, 337, 1315, 3580, 429, 3848, 2417, 87, 727]\n",
      "\n",
      "\n",
      "10 first solutions most similar to 337:\n",
      "[429, 5674, 2093, 881, 1411, 3420, 3474, 3443, 1315, 2417]\n",
      "\n",
      "\n",
      "10 first solutions most similar to 347:\n",
      "[727, 87, 2948, 1377, 3640, 2311, 5018, 4976, 1181, 3153]\n",
      "\n",
      "\n",
      "10 first solutions most similar to 397:\n",
      "[2274, 3687, 60, 1501, 2465, 3084, 3602, 3295, 1411, 1220]\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#for sol in s_solindex:\n",
    "for sol in range(10):\n",
    "    sim_sols_df = dist_df.sort(columns=sol)[sol]\n",
    "    sim_sols = sim_sols_df.drop([sol]).index\n",
    "    print('10 first solutions most similar to ' + str(s_solindex[sol]) + ':')\n",
    "    sss = []\n",
    "    for ss in sim_sols[:10]:\n",
    "        sss.append(s_solindex[ss])\n",
    "    print(sss)\n",
    "    print('\\n')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
